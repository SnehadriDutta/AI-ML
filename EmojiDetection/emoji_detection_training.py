# -*- coding: utf-8 -*-
"""emoji-detection-training.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/122oN8383tJC0x_X2Zmtt7KcFbijwP1kO
"""

import numpy as np
import cv2
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Flatten
from tensorflow.keras.layers import Conv2D
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.layers import MaxPooling2D
from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_dir = "drive/MyDrive/FacialExpressionData/train"
test_dir = "drive/MyDrive/FacialExpressionData/test"

train_datagen = ImageDataGenerator(1./255)
test_datagen = ImageDataGenerator(1./255)
train_generator = train_datagen.flow_from_directory(train_dir, target_size = (48,48),
                                                   batch_size = 64, color_mode = 'grayscale',
                                                   class_mode = 'categorical')
test_generator = test_datagen.flow_from_directory(test_dir, target_size = (48,48),
                                                   batch_size = 64, color_mode = 'grayscale',
                                                   class_mode = 'categorical')

train_datagen.

model = Sequential()
model.add(Conv2D(32, kernel_size = (3,3), activation = 'relu', input_shape = (48,48,1)))
model.add(Conv2D(64, kernel_size = (3,3), activation  = 'relu'))
model.add(MaxPooling2D(pool_size = (2,2)))
model.add(Dropout(0.25))
model.add(Conv2D(128, kernel_size = (3,3), activation = 'relu'))
model.add(MaxPooling2D(pool_size = (2,2)))
model.add(Conv2D(128, kernel_size = (3,3), activation = 'relu'))
model.add(MaxPooling2D(pool_size = (2,2)))
model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(1024, activation = 'relu'))
model.add(Dense(7, activation = 'softmax'))

model.compile(loss = 'categorical_crossentropy', optimizer = Adam(learning_rate= 0.0001, decay = 1e-6),
              metrics = ['accuracy'])

r = model.fit_generator(train_generator, steps_per_epoch = 28709//64, epochs = 50,
                        validation_data = test_generator, validation_steps = 7178//64)

model.save("emoji-detection-model-2.h5")
model.save_weights("emoji-detection-weights-2.h5")

import matplotlib.pyplot as plt

# loss
plt.plot(r.history['loss'], label='train loss')
plt.plot(r.history['val_loss'], label='val loss')
plt.legend()
plt.show()

plt.plot(r.history['accuracy'], label='train acc')
plt.plot(r.history['val_accuracy'], label='val acc')
plt.legend()
plt.show()